extend type Query {}

extend type Mutation {
  # Register user
  register(input: RegisterUserInput!): UserPayload!
  # Login user
  login(input: LoginUserInput!): AuthPayload!

  # Register user
  registerPassword(input: RegisterUserInput!): UserPayload!
  # Login user
  loginPassword(input: LoginUserInput!): AuthPayload!
  # Password management
  forgotPassword(input: ForgotPasswordInput!): Boolean!
  resetPassword(input: ResetPasswordInput!): ResetPayload!

  # Login user (no need to register, just create first time seen)
  loginPasswordless(input: LoginUserInput!): AuthPayload!

  # Logout user
  logout: Boolean!

  # Refresh user tokens
  refreshToken(token: String!, refreshToken: String!): AuthPayload!

}

extend type Subscription {}



#
# Auth Extensions of Other Types
#

extend type User {
  userRoles: [UserRoleInfo]
  groupRoles: [GroupRoleInfo]
  orgRoles: [OrgRoleInfo]
}



#
# Role Types
#

type UserRoleInfo {
  id: ID!
  name: String
  scopes: [String]
}

type GroupRoleInfo {
  groupId: ID!
  groupName: String
  scopes: [String]
  roles: [RoleInfo]
}

type OrgRoleInfo {
  orgId: ID!
  orgName: String
  scopes: [String]
  roles: [RoleInfo]
}

type RoleInfo {
  id: ID!
  name: String
  scopes: [String]
}



#
# Authentication Types
#

type ServiceAccountAuth {
  apikey: ApiKeyAuth
  certificate: CertificateAuth
}

type UserAuth {
  certificates: [CertificateAuth]
  apikeys: [ApiKeyAuth]
  oauths: [UserOAuth]
}

type CertificateAuth {
  name: String
  serial: String
}

type ApiKeyAuth {
  name: String
  key: String
}

type UserOAuth {
  provider: String
}

type AuthPayload {
  tokens: Tokens
  errors: [FieldError!]
}

type ResetPayload {
  errors: [FieldError!]
}

type Tokens {
  token: String!
  refreshToken: String!
}


input ServiceAccountAuthInput {
  certificate: AuthCertificateInput
}

input UserAuthInput {
  certificate: AuthCertificateInput
  apikey: ApiKeyInput
  oauth: OAuthInput
}

input AuthCertificateInput {
  serial: String
}

input ApiKeyInput {
  name: String
}

input OAuthInput {
  provider: String
  oauthId: String
}


#
# Account State Flow types
#

input RegisterUserInput {
  username: String!
  email: String!
  password: String!
}

input LoginUserInput {
  email: String!
  password: String!
}

input ForgotPasswordInput {
  email: String!
}

input ResetPasswordInput {
  token: String!
  password: String!
  passwordConfirmation: String!
}
