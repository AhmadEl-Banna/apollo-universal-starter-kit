extend type Query {

  # Get all orgs, possibly filtered and ordered 
  orgs(filters: [FilterInput], orderBy: [OrderByInput]): [Org]
  # Get org by id
  org(id: String!): Org

  # Get all groups, possibly filtered and ordered 
  groups(filters: [FilterInput], orderBy: [OrderByInput]): [Group]
  # Get group by id
  group(id: String!): Group

  # Get all users, possibly filtered and ordered 
  users(filters: [FilterInput], orderBy: [OrderByInput]): [User]
  # Get user by id
  user(id: String!): User
  # Get current user
  currentUser: User

  # Get all serviceaccounts, possibly filtered and ordered 
  serviceaccounts(filters: [FilterInput], orderBy: [OrderByInput]): [ServiceAccount]
  # Get serviceaccount by id
  serviceaccount(id: String!): ServiceAccount

}

extend type Mutation {

  # Create new org
  addOrg(input: AddOrgInput!): OrgPayload!
  # Edit a org
  editOrg(input: EditOrgInput!): OrgPayload!
  # Delete a org
  deleteOrg(id: String!): OrgPayload!

  # Create new group
  addGroup(input: AddGroupInput!): GroupPayload!
  # Edit a group
  editGroup(input: EditGroupInput!): GroupPayload!
  # Delete a group
  deleteGroup(id: String!): GroupPayload!

  # Create new user
  addUser(input: AddUserInput!): UserPayload!
  # Edit a user
  editUser(input: EditUserInput!): UserPayload!
  # Delete a user
  deleteUser(id: String!): UserPayload!

  # Create new service account
  addServiceAccount(input: AddServiceAccountInput!): ServiceAccountPayload!
  # Edit a service account
  editServiceAccount(input: EditServiceAccountInput!): ServiceAccountPayload!
  # Delete a service account
  deleteServiceAccount(id: String!): ServiceAccountPayload!

}

extend type Subscription {}


#
# Input types for filtering queries
#   (likely to change for more flexible querying and search)
#

input FilterInput {
  # search by username, email, or any column
  searchField: String
  searchText: String
  # filter by role
  role: String
  # filter by isActive
  isActive: Boolean
}

input OrderByInput {
  # id | username | role | isActive | email
  column: String
  # asc | desc
  order: String
}



#
# Org Types
#

type OrgPayload {
  org: Org
  errors: [FieldError!]
}

type Org {
  id: String!
  name: String!
  domain: String!

  profile: OrgProfile

  groups [Group]
  users  [User]
  svcaccts [ServiceAccount]
}

type OrgProfile {
  displayName: String
  description: String
}

input AddOrgInput {
  name: String!
  domain: String!

  profile: OrgProfileInput
}

input EditOrgInput {
  id: String!
  name: String
  isActive: Boolean

  profile: OrgProfileInput
}

input OrgProfileInput {
  displayName: String
  description: String
}


#
# Group Types
#

type GroupPayload {
  group: Group
  errors: [FieldError!]
}

type Group {
  id: String!
  name: String!

  profile: GroupProfile

  orgs   [Org]
  users  [User]
  svcaccts [ServiceAccount]
}

type GroupProfile {
  displayName: String
  description: String
}

input AddGroupInput {
  name: String!

  profile: GroupProfileInput
}

input EditGroupInput {
  id: String!
  name: String
  isActive: Boolean

  profile: GroupProfileInput
}

input GroupProfileInput {
  displayName: String
  description: String
}



#
# User Types
#

type UserPayload {
  user: User
  errors: [FieldError!]
}

type User {
  id: String!
  email: String!

  auth: UserAuth
  profile: UserProfile

  orgs   [Org]
  groups [Group]
}

type UserProfile {
  displayName: String
  firstName: String
  lastName: String

  emails: [String]
}

input AddUserInput {
  email: String!
  profile: ProfileInput
  auth: AuthInput
}

input EditUserInput {
  id: String!
  isActive: Boolean
  email: String!

  profile: ProfileInput
  auth: AuthInput
}

input ProfileInput {
  displayName: String
  firstName: String
  lastName: String

  emails: [String]
}


#
# ServiceAccount Types
#

type ServiceAccountPayload {
  user: ServiceAccount
  errors: [FieldError!]
}

type ServiceAccount {
  id: String!
  email: String!

  auth: ServiceAccountAuth
  profile: ServiceAccountProfile

  orgs   [Org]
  groups [Group]
}

type ServiceAccountProfile {
  displayName: String
  description: String
}

input AddServiceAccountInput {
  email: String!
  profile: ServiceAccountProfileInput
  auth: ServiceAccountAuthInput
}

input EditServiceAccountInput {
  id: String!
  isActive: Boolean
  email: String!

  profile: ServiceAccountProfileInput
  auth: ServiceAccountAuthInput
}

input ServiceAccountProfileInput {
  displayName: String
  description: String
}









